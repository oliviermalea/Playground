version: '3.4'

services:
  # ShowRoom APIs
  showroom.customer.webapi:
    image: ${DOCKER_REGISTRY-}showroomcustomerwebapi
    build:
      context: .
      dockerfile: ShowRoom.Customer.WebAPi/Dockerfile
    #ports:
    #  - '55295:55295'

  showroom.order.webapi:
    image: ${DOCKER_REGISTRY-}showroomorderwebapi
    build:
      context: .
      dockerfile: ShowRoom.Order.WebApi/Dockerfile

  # SonarQube
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    hostname: sonarqube
    labels:
      NAME: "sonarqube"
    #networks:
    #  - sonarnet
    #depends_on:
    #  - db
    environment:     
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonartest
      SONAR_JDBC_PASSWORD: sonartest
    volumes:
      - SonarQube_data:/opt/SonarQube/data
      #- SonarQube_extensions:/opt/SonarQube/extensions
      - SonarQube_logs:/opt/SonarQube/logs
    ports:
      - "9000:9000"
      - "9092:9092"
  #db:
  #  image: postgres:12
  #  container_name: postgres
  #  hostname: postgres
  #  labels:
  #    NAME: "postgres"
  #  environment:
  #    POSTGRES_USER: sonartest
  #    POSTGRES_PASSWORD: sonartest
  #  volumes:
  #    - postgresql:/var/lib/postgresql
  #    - postgresql_data:/var/lib/postgresql/data

  ##dotnetscanner
  #dotnetscanner:
  #  image: mcr.microsoft.com/dotnet/sdk:7.0
  #  volumes:
  #    - .:/app
  #  working_dir: /app
  #  entrypoint: ["dotnet", "tool", "install", "--global", "dotnet-sonarscanner"]

  ## SonarScanner
  #sonarscanner:
  #  container_name: sonarscanner
  #  image: newtmitch/sonar-scanner
  #  networks:
  #    - sonarnet
  #  volumes:
  #    - ./:/usr/src

  # RabbitMq
  rabbitmq:
    image: rabbitmq:3.12.2-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    labels:
      NAME: "rabbitmq"
    environment: 
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    #networks:
    #    - rabbitmq_go_net
  
  #Zipkin Backend
  # back-ends
  # http://localhost:9411/zipkin
  zipkin-all-in-one:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"

  # http://localhost:16686/
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:1.47
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "4318:4317"
      - "16686:16686"

  # Prometheus Backend
  # http://localhost:9090/
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  # Seq
  # http://localhost:5341/
  seq:
    container_name: seq
    image: datalust/seq
    ports:
      - "5341:80"
      - "5342:5342"
      - "45341:45341"
    environment:
      - ACCEPT_EULA=Y
    restart: unless-stopped

  ## Grafana
  #grafana:
  #  image: grafana/grafana-enterprise
  #  container_name: grafana
  #  restart: unless-stopped
  #  ports:
  #    - '3000:3000'
  #  volumes:
  #    - grafana_data:/var/lib/grafana

  # OpenTelemetry Collector
  otel-collecor:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
      - ./output:/etc/output:rw # Store the logs
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      #- "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
    depends_on:
      - zipkin-all-in-one

  # Redis
  redis:
    container_name: redis
    image: redis:7.0.12-alpine
    #networks:
    #    - demo
    ports:
        - 0.0.0.0:6379:6379
    stop_grace_period: 1s

volumes:
  SonarQube_data:
  #SonarQube_extensions:
  SonarQube_logs:
#  postgresql:
#  postgresql_data:

networks:
  default:
    driver: bridge
  #sonarnet:


